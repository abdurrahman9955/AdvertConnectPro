{"version":3,"file":"ReactHookFormInput.js","names":["React","useCallback","useImperativeHandle","Controller","PropTypes","useExternalRef","ReactHookFormInput","externalRef","Component","name","defaultValue","shouldUnregister","control","rules","onChange_","onChange","onBlur_","onBlur","rest","internalRef","refPassthrough","undefined","renderInputComponent","ref","restReactHookFormControlledFieldProps","focus","current","onChangeCombined","value","onBlurCombined","event","onFocus","props","field","forwardRef","propTypes","elementType","isRequired","string","bool","object","func"],"sources":["../../source/react-hook-form/ReactHookFormInput.js"],"sourcesContent":["import React, { useCallback, useImperativeHandle } from 'react'\r\nimport { Controller } from 'react-hook-form'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useExternalRef from '../useExternalRef.js'\r\n\r\nlet ReactHookFormInput = ({\r\n  Component,\r\n  name,\r\n  defaultValue,\r\n  shouldUnregister,\r\n  control,\r\n  rules,\r\n  onChange: onChange_,\r\n  onBlur: onBlur_,\r\n  ...rest\r\n}, externalRef) => {\r\n  const [internalRef, refPassthrough] = useExternalRef(externalRef)\r\n\r\n  // `feact-hook-form` doesn't know how to properly handle `undefined` values.\r\n  // https://github.com/react-hook-form/react-hook-form/issues/2990\r\n  defaultValue = defaultValue === undefined ? null : defaultValue\r\n\r\n  const renderInputComponent = ({\r\n    ref,\r\n    onChange,\r\n    onBlur,\r\n    // `restReactHookFormControlledFieldProps` contain properties like `name` and `value`.\r\n    // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n    ...restReactHookFormControlledFieldProps\r\n  }) => {\r\n    // Setting `ref` passed by `react-hook-form` results in a bug:\r\n    // when an initial value is defined (example: \"+78005553535\")\r\n    // it seems to be set directly on the `ref`d `<input/>`\r\n    // by `react-hook-form` and the result is a non-formatted\r\n    // \"+78005553535\" initial value in the `<input/>`.\r\n    //\r\n    // To work around that bug, a fake `ref` is assigned,\r\n    // so that it could only `.focus()` it and no more.\r\n    //\r\n    // `useImperativeHandle()` hook seems to allow `ref` being `undefined`.\r\n    //\r\n    // if (ref) {\r\n      useImperativeHandle(ref, () => ({\r\n        focus() {\r\n          internalRef.current.focus()\r\n        }\r\n      }))\r\n    // }\r\n\r\n    // This function may not work correctly when `defaultValues` are set for the input\r\n    // and the user clears the input value manually: the default value may re-appear as a result.\r\n    // https://github.com/catamphetamine/react-phone-number-input/issues/405#issuecomment-1295885201\r\n    const onChangeCombined = useCallback((value) => {\r\n      // `react-hook-form` doesn't know how to properly handle `undefined` values.\r\n      // https://github.com/react-hook-form/react-hook-form/issues/2990\r\n      if (value === undefined) {\r\n        value = null\r\n      }\r\n      onChange(value)\r\n      if (onChange_) {\r\n        onChange_(value)\r\n      }\r\n    }, [\r\n      onChange,\r\n      onChange_\r\n    ])\r\n\r\n    const onBlurCombined = useCallback((event) => {\r\n      onBlur(event)\r\n      if (onBlur_) {\r\n        onBlur_(event)\r\n      }\r\n    }, [\r\n      onBlur,\r\n      onBlur_\r\n    ])\r\n\r\n    return (\r\n      <Component\r\n        {...rest}\r\n        {...restReactHookFormControlledFieldProps}\r\n        ref={refPassthrough}\r\n        onChange={onChangeCombined}\r\n        onBlur={onBlurCombined}/>\r\n    )\r\n  }\r\n\r\n  // `react-hook-form@7` no longer accepts `onFocus` property.\r\n  // Since this component can be used with both `v6` and `v7`,\r\n  // the `onFocus` property is left here.\r\n  const onFocus = useCallback(() => {\r\n    // internalRef.current.disabled = false\r\n    internalRef.current.focus()\r\n  }, [])\r\n\r\n  return (\r\n    <Controller\r\n      control={control}\r\n      name={name}\r\n      defaultValue={defaultValue}\r\n      shouldUnregister={shouldUnregister}\r\n      rules={rules}\r\n      onFocus={onFocus}\r\n      render={(props) => {\r\n        // Differentiate between `react-hook-form@6` and `react-hook-form@7`.\r\n        // https://react-hook-form.com/migrate-v6-to-v7/\r\n        // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/57\r\n        // `props` (before v7) and `props.fields` (in v7) contain properties like:\r\n        // `ref`, `name`, `value`, `onChange`, `onBlur`.\r\n        // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\r\n        return renderInputComponent(props.field || props)\r\n      }}/>\r\n  )\r\n}\r\n\r\nReactHookFormInput = React.forwardRef(ReactHookFormInput)\r\n\r\nReactHookFormInput.propTypes = {\r\n  Component: PropTypes.elementType.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  defaultValue: PropTypes.string,\r\n  // A quote from `react-hook-form`:\r\n  // Without `shouldUnregister: true`, an input value would be retained when input is removed.\r\n  // Setting `shouldUnregister: true` makes the form behave more closer to native.\r\n  shouldUnregister: PropTypes.bool,\r\n  // A developer should pass a `control` object that is returned from `useForm()` hook.\r\n  // Not required when using `<FormProvider/>`.\r\n  control: PropTypes.object,\r\n  rules: PropTypes.object,\r\n  onChange: PropTypes.func,\r\n  onBlur: PropTypes.func\r\n}\r\n\r\nexport default ReactHookFormInput"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,mBAA7B,QAAwD,OAAxD;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,cAAP,MAA2B,sBAA3B;;AAEA,IAAIC,kBAAkB,GAAG,kCAUtBC,WAVsB,EAUN;EAAA,IATjBC,SASiB,QATjBA,SASiB;EAAA,IARjBC,IAQiB,QARjBA,IAQiB;EAAA,IAPjBC,YAOiB,QAPjBA,YAOiB;EAAA,IANjBC,gBAMiB,QANjBA,gBAMiB;EAAA,IALjBC,OAKiB,QALjBA,OAKiB;EAAA,IAJjBC,KAIiB,QAJjBA,KAIiB;EAAA,IAHPC,SAGO,QAHjBC,QAGiB;EAAA,IAFTC,OAES,QAFjBC,MAEiB;EAAA,IADdC,IACc;;EACjB,sBAAsCb,cAAc,CAACE,WAAD,CAApD;EAAA;EAAA,IAAOY,WAAP;EAAA,IAAoBC,cAApB,uBADiB,CAGjB;EACA;;;EACAV,YAAY,GAAGA,YAAY,KAAKW,SAAjB,GAA6B,IAA7B,GAAoCX,YAAnD;;EAEA,IAAMY,oBAAoB,GAAG,SAAvBA,oBAAuB,QAOvB;IAAA,IANJC,GAMI,SANJA,GAMI;IAAA,IALJR,QAKI,SALJA,QAKI;IAAA,IAJJE,MAII,SAJJA,MAII;IAAA,IADDO,qCACC;;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACEtB,mBAAmB,CAACqB,GAAD,EAAM;MAAA,OAAO;QAC9BE,KAD8B,mBACtB;UACNN,WAAW,CAACO,OAAZ,CAAoBD,KAApB;QACD;MAH6B,CAAP;IAAA,CAAN,CAAnB,CAbE,CAkBJ;IAEA;IACA;IACA;;IACA,IAAME,gBAAgB,GAAG1B,WAAW,CAAC,UAAC2B,KAAD,EAAW;MAC9C;MACA;MACA,IAAIA,KAAK,KAAKP,SAAd,EAAyB;QACvBO,KAAK,GAAG,IAAR;MACD;;MACDb,QAAQ,CAACa,KAAD,CAAR;;MACA,IAAId,SAAJ,EAAe;QACbA,SAAS,CAACc,KAAD,CAAT;MACD;IACF,CAVmC,EAUjC,CACDb,QADC,EAEDD,SAFC,CAViC,CAApC;IAeA,IAAMe,cAAc,GAAG5B,WAAW,CAAC,UAAC6B,KAAD,EAAW;MAC5Cb,MAAM,CAACa,KAAD,CAAN;;MACA,IAAId,OAAJ,EAAa;QACXA,OAAO,CAACc,KAAD,CAAP;MACD;IACF,CALiC,EAK/B,CACDb,MADC,EAEDD,OAFC,CAL+B,CAAlC;IAUA,oBACE,oBAAC,SAAD,eACME,IADN,EAEMM,qCAFN;MAGE,GAAG,EAAEJ,cAHP;MAIE,QAAQ,EAAEO,gBAJZ;MAKE,MAAM,EAAEE;IALV,GADF;EAQD,CA/DD,CAPiB,CAwEjB;EACA;EACA;;;EACA,IAAME,OAAO,GAAG9B,WAAW,CAAC,YAAM;IAChC;IACAkB,WAAW,CAACO,OAAZ,CAAoBD,KAApB;EACD,CAH0B,EAGxB,EAHwB,CAA3B;EAKA,oBACE,oBAAC,UAAD;IACE,OAAO,EAAEb,OADX;IAEE,IAAI,EAAEH,IAFR;IAGE,YAAY,EAAEC,YAHhB;IAIE,gBAAgB,EAAEC,gBAJpB;IAKE,KAAK,EAAEE,KALT;IAME,OAAO,EAAEkB,OANX;IAOE,MAAM,EAAE,gBAACC,KAAD,EAAW;MACjB;MACA;MACA;MACA;MACA;MACA;MACA,OAAOV,oBAAoB,CAACU,KAAK,CAACC,KAAN,IAAeD,KAAhB,CAA3B;IACD;EAfH,EADF;AAkBD,CA5GD;;AA8GA1B,kBAAkB,gBAAGN,KAAK,CAACkC,UAAN,CAAiB5B,kBAAjB,CAArB;AAEAA,kBAAkB,CAAC6B,SAAnB,GAA+B;EAC7B3B,SAAS,EAAEJ,SAAS,CAACgC,WAAV,CAAsBC,UADJ;EAE7B5B,IAAI,EAAEL,SAAS,CAACkC,MAAV,CAAiBD,UAFM;EAG7B3B,YAAY,EAAEN,SAAS,CAACkC,MAHK;EAI7B;EACA;EACA;EACA3B,gBAAgB,EAAEP,SAAS,CAACmC,IAPC;EAQ7B;EACA;EACA3B,OAAO,EAAER,SAAS,CAACoC,MAVU;EAW7B3B,KAAK,EAAET,SAAS,CAACoC,MAXY;EAY7BzB,QAAQ,EAAEX,SAAS,CAACqC,IAZS;EAa7BxB,MAAM,EAAEb,SAAS,CAACqC;AAbW,CAA/B;AAgBA,eAAenC,kBAAf"}